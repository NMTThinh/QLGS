import { Injectable, NotFoundException } from '@nestjs/common';
import { InvoiceRepository } from './invoice.repository';
import { CreateInvoiceDto } from './dto/create_invoice.dto';
import { UpdateInvoiceDto } from './dto/update_invoice.dto';

@Injectable()
export class InvoiceService {
  constructor(private readonly invoiceRepository: InvoiceRepository) {}

  // ‚úÖ T·∫°o h√≥a ƒë∆°n
  async create(data: CreateInvoiceDto): Promise<any> {
    try {
      console.log('üì¶ D·ªØ li·ªáu h√≥a ƒë∆°n chu·∫©n b·ªã insert:', data);
      return await this.invoiceRepository.create(data);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o h√≥a ƒë∆°n:', error);
      throw error;
    }
  }

  // ‚úÖ L·∫•y m·ªôt h√≥a ƒë∆°n theo ID
  async findOne(id: string) {
    const invoice = await this.invoiceRepository.findOne(id);
    if (!invoice) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n');
    }
    return invoice;
  }

  // ‚úÖ C·∫≠p nh·∫≠t h√≥a ƒë∆°n
  async update(id: string, updateInvoiceDto: UpdateInvoiceDto) {
    const invoice = await this.findOne(id); // Ki·ªÉm tra s·ª± t·ªìn t·∫°i tr∆∞·ªõc
    return this.invoiceRepository.updateOne(id, invoice, updateInvoiceDto);
  }

  // ‚úÖ X√≥a h√≥a ƒë∆°n
  async delete(id: string) {
    await this.findOne(id); // Ki·ªÉm tra s·ª± t·ªìn t·∫°i tr∆∞·ªõc
    return this.invoiceRepository.deleteOne(id);
  }

  // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n
  async updateStatus(id: string, status: string) {
    await this.findOne(id); // Ki·ªÉm tra s·ª± t·ªìn t·∫°i tr∆∞·ªõc
    return this.invoiceRepository.updateStatusById(id, status);
  }

  // ‚úÖ L·∫•y danh s√°ch h√≥a ƒë∆°n c√≥ ph√¢n trang v√† t√¨m ki·∫øm
  async findAll(page: number, limit: number, sort: 'asc' | 'desc', keyword?: string) {
    return this.invoiceRepository.findAll(page, limit, sort, keyword);
  }
}
