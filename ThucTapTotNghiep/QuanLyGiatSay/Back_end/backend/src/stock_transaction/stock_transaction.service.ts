import { Injectable, NotFoundException } from '@nestjs/common';
import { StockTransactionRepository } from './stock_transaction.repository';
import { CreateStockTransactionDto } from './dto/create_stock_transaction.dto';
import { UpdateStockTransactionDto } from './dto/update_stock_transaction.dto';

@Injectable()
export class StockTransactionService {
  constructor(private readonly repository: StockTransactionRepository) {}

  // ‚úÖ T·∫°o m·ªõi giao d·ªãch kho
  async create(dto: CreateStockTransactionDto) {
    try {
      console.log('üì¶ D·ªØ li·ªáu giao d·ªãch kho nh·∫≠n ƒë∆∞·ª£c:', dto);
      return await this.repository.create(dto);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o giao d·ªãch kho:', error);
      throw error;
    }
  }

  // ‚úÖ L·∫•y danh s√°ch giao d·ªãch kho (ph√¢n trang, t√¨m ki·∫øm)
  async findAll(page: number, limit: number, sort: 'asc' | 'desc', keyword?: string) {
    return await this.repository.findAll(page, limit, sort, keyword);
  }

  // ‚úÖ L·∫•y th√¥ng tin chi ti·∫øt giao d·ªãch kho theo ID
  async findOne(id: string) {
    const transaction = await this.repository.findOne(id);
    if (!transaction) {
      throw new NotFoundException(`üö´ Kh√¥ng t√¨m th·∫•y giao d·ªãch kho c√≥ ID: ${id}`);
    }
    return transaction;
  }

  // ‚úÖ C·∫≠p nh·∫≠t giao d·ªãch kho
  async update(id: string, updateDto: UpdateStockTransactionDto) {
    await this.findOne(id); // Ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªõc
    return await this.repository.updateOne(id, updateDto);
  }

  // ‚úÖ X√≥a giao d·ªãch kho
  async delete(id: string) {
    await this.findOne(id); // Ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªõc
    return await this.repository.deleteOne(id);
  }
}
